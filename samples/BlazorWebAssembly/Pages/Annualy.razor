@page "/annualyview"
@using BlazorCalendar
@using BlazorCalendar.Models


<PageTitle>Blazor Calendar Samples</PageTitle>

<div class="d-flex flex-row mb-2">
	<button type="button" class="btn" @onclick="@(m => ClicMonthNavigate(-1))">◀️</button>  
	<button type="button" @onclick="@(m => ClicMonthNavigate(1))" class="me-2">▶️</button>
	<input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
	<input type="number" class="me-2" min="1" @bind-value="months">
	<select @bind="@PriorityDisplay" class="me-2">
		<option value="@PriorityLabel.Code" selected>Label: Code</option>
		<option value="@PriorityLabel.Caption">Label: Caption</option>
	</select>
	<div>
		<input type="checkbox" @bind="draggable" id="is-draggable" />
		<label for="is-draggable">Draggable</label>
	</div>		 
</div>


<CalendarContainer FirstDate="today" TasksList="TasksList.ToArray()"  DisplayedView="DisplayedView.Annual" >
	<AnnualView Months="months" Style="height:80vh"
				PriorityDisplay="@PriorityDisplay"
				HeaderClick="HeaderClick"
				TaskClick="TaskClick" EmptyDayClick="EmptyDayClick" EmptyDayMouseDown="EmptyDayMouseDown"
				Draggable="@draggable" DragStart="DragStart" DropTask="DropTask" DragEnterTask="DragEnterTask"/>
</CalendarContainer>


<br />
<div class="console">@fakeConsole</div>

@code{
	private DateTime today = DateTime.Today;  
	private int months = 8;
	private List<Tasks> TasksList;
	private string fakeConsole = "";
	private BlazorCalendar.PriorityLabel PriorityDisplay = PriorityLabel.Code;
	private bool draggable = true;
	private int currentMaxID = 0;
	private int GetNextID()
	{
		return ++currentMaxID;
	}
	protected override void OnInitialized()
	{
		TasksList = new()
		{
			new Tasks { ID = GetNextID(), DateStart = today.AddDays(8), DateEnd = today.AddDays(8), Code = "CP", Color = "#19C319", Caption = "Lorem ipsum dolor sit amet", FillStyle=BlazorCalendar.FillStyleEnum.CrossDots },
			new Tasks { ID = GetNextID(), DateStart = today.AddDays(50), DateEnd = today.AddDays(52), Code = "DEV", Color = "#FFD800", Comment="on Teams template", Caption = "Fusce quis purus eu ante", FillStyle=BlazorCalendar.FillStyleEnum.ZigZag },
			new Tasks { ID = GetNextID(), DateStart = today.AddDays(40), DateEnd = today.AddDays(41), Code = "FORM", Color = "#FFC3FF", ForeColor = "#FF0000", Caption = "Lorem ipsum dolor sit amet" },
			new Tasks { ID = GetNextID(), DateStart = today.AddDays(62), DateEnd = today.AddDays(62), Code = "DEV", Color = "#FFD800" },
			new Tasks { ID = GetNextID(), DateStart = today.AddDays(62), DateEnd = today.AddDays(62), Code = "FORM", Color = "#FFC3FF", Caption = "Ut sit amet turpis eget" } ,
			new Tasks { ID = GetNextID(), DateStart = today.AddDays(73).AddHours(8), DateEnd = today.AddDays(73).AddHours(9), Code = "MEETING", Color = "#2DD7D7", Comment="Julien's test" }
		};
	}

	private void ChangeFirstDate(string value)
	{
		if (string.IsNullOrEmpty(value)) return;
		today = DateTime.Parse(value.ToString());
	}	 

	private void HeaderClick(DateTime month)
	{
		fakeConsole = "HeaderClick :" + month.ToString("MMM yyyy");
	}

	private void ClicMonthNavigate(int monthToAdd)
	{
		today = today.AddMonths(monthToAdd);
	}

	private void TaskClick(ClickTaskParameter clickTaskParameter)
	{
		fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
	}	

	private void EmptyDayClick(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
		if(!isDragging)
			isNewEntry = false;
	}

	private void EmptyDayMouseDown(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
		isNewEntry = true;

		var task = new Tasks { ID = GetNextID(), DateStart = clickEmptyDayParameter.Day, DateEnd = clickEmptyDayParameter.Day, Code = "DEV", Color = "#FFD800" };
		TasksList.Add(task);
	}

	#region Drag & Drop
	bool isNewEntry = false;
	bool isDragging = false;
	DateTime dragStartedDay;
	Tasks taskDragged;
	private void DragStart(DragDropParameter dragDropParameter)
	{	 
		isDragging = true;
		dragStartedDay = dragDropParameter.Day;
		taskDragged = TasksList.FirstOrDefault(t => t.ID == dragDropParameter.taskID);
	}

	private void DragEnterTask(DragDropParameter dragDropParameter)
	{
		fakeConsole = $"DragEnter event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

		if (isNewEntry)
		{
			if (taskDragged != null)
			{
				if (dragDropParameter.Day > dragStartedDay)
				{
					taskDragged.DateStart = dragStartedDay;
					taskDragged.DateEnd = dragDropParameter.Day;
				}
				else
				{
					taskDragged.DateEnd = dragStartedDay;
					taskDragged.DateStart = dragDropParameter.Day;
				}
			}
		}
	}

	private void DropTask(DragDropParameter dragDropParameter)
	{													 
		fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

		isDragging = false;
		if( !isNewEntry ) {
			var TotalDay = (taskDragged.DateEnd - taskDragged.DateStart).TotalDays;
			taskDragged.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
			taskDragged.DateStart = dragDropParameter.Day;
		}
		isNewEntry = false;
	}
	#endregion Drag & Drop
}